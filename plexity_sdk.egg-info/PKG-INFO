Metadata-Version: 2.4
Name: plexity-sdk
Version: 0.3.0
Summary: Python SDK for Plexity Agentic RAG Orchestrator
Author-email: Plexity <support@plexity.ai>
License: Proprietary
Project-URL: Homepage, https://github.com/plexity/agentic-rag-orchestrator
Project-URL: Documentation, https://github.com/plexity/agentic-rag-orchestrator/tree/main/docs
Keywords: plexity,rag,graph,sdk,agentic,automation
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.32.0
Provides-Extra: dev
Requires-Dist: pytest>=8.3.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.23.0; extra == "dev"
Provides-Extra: langchain
Requires-Dist: langchain-core>=0.2.20; extra == "langchain"
Provides-Extra: llamaindex
Requires-Dist: llama-index>=0.10.50; extra == "llamaindex"
Provides-Extra: haystack
Requires-Dist: haystack-ai>=2.0.0; extra == "haystack"
Provides-Extra: frameworks
Requires-Dist: langchain-core>=0.2.20; extra == "frameworks"
Requires-Dist: llama-index>=0.10.50; extra == "frameworks"
Requires-Dist: haystack-ai>=2.0.0; extra == "frameworks"
Provides-Extra: async
Requires-Dist: httpx>=0.27.0; extra == "async"
Provides-Extra: graphrag-core
Provides-Extra: graphrag-enterprise
Requires-Dist: neo4j>=5.16; extra == "graphrag-enterprise"
Requires-Dist: boto3>=1.33.0; extra == "graphrag-enterprise"
Requires-Dist: google-cloud-storage>=2.16.0; extra == "graphrag-enterprise"
Requires-Dist: minio>=7.2.14; extra == "graphrag-enterprise"
Requires-Dist: temporalio>=1.4.0; extra == "graphrag-enterprise"
Provides-Extra: enterprise
Requires-Dist: neo4j>=5.16; extra == "enterprise"
Requires-Dist: boto3>=1.33.0; extra == "enterprise"
Requires-Dist: google-cloud-storage>=2.16.0; extra == "enterprise"
Requires-Dist: minio>=7.2.14; extra == "enterprise"
Requires-Dist: temporalio>=1.4.0; extra == "enterprise"
Provides-Extra: s3
Requires-Dist: boto3>=1.33.0; extra == "s3"
Provides-Extra: gcs
Requires-Dist: google-cloud-storage>=2.16.0; extra == "gcs"
Provides-Extra: minio
Requires-Dist: minio>=7.2.14; extra == "minio"
Provides-Extra: temporal
Requires-Dist: temporalio>=1.4.0; extra == "temporal"
Provides-Extra: argo
Requires-Dist: requests>=2.32.0; extra == "argo"

# Plexity Python SDK

Official Python bindings for the Plexity Agentic RAG Orchestrator API.

## Installation

```bash
pip install plexity-sdk
```

## Development & Testing

Install the SDK with development extras and run the verification suite:

```bash
pip install -e .[dev]
pytest
```

## Quickstart

```python
from plexity_sdk import PlexityClient

client = PlexityClient(
    base_url="https://api.plexity.ai",
    api_key="sqk_xxx.yyy"
)

workflows = client.list_workflows()
print(workflows)
```

See the full documentation in [docs/sdk-python.md](docs/sdk-python.md).

## GraphRAG Search

```python
from plexity_sdk import GraphRAGClient, PlexityClient

client = PlexityClient(base_url="https://api.plexity.ai", api_key="sqk_xxx.yyy")
rag = GraphRAGClient(client, org_id="org_default", environment="prod")
rag.validate_backend_support()

result = rag.search(
    "Summarise the latest release milestones",
    use_microsoft_cli=True,
    microsoft_cli={"workspacePath": "/opt/graphrag/workspace"}
)

print(result["answer"])
```

Set `use_microsoft_cli=True` to delegate the query to the Microsoft GraphRAG CLI (with optional overrides passed under `microsoft_cli`). Omit the flag or set it to `False` to force the native orchestrator engine.

### Framework Integrations

The SDK ships optional helpers for popular retrieval frameworks:

```python
from plexity_sdk import (
    PlexityClient,
    GraphRAGClient,
    create_langchain_retriever,
    LangChainRetrieverOptions,
)

client = PlexityClient(base_url="https://api.plexity.ai", api_key="sqk_xxx.yyy")
rag = GraphRAGClient(client, org_id="org_default", environment="prod")

retriever = create_langchain_retriever(
    rag,
    options=LangChainRetrieverOptions(max_entities=5, max_communities=5),
)

docs = retriever.get_relevant_documents("How do I rotate API keys?")
```

Install optional integration dependencies with extras such as `pip install plexity-sdk[langchain]`, `pip install plexity-sdk[llamaindex]`, or `pip install plexity-sdk[haystack]`. A `frameworks` extra installs all three. `GraphRAGClient` automatically probes the orchestrator for enterprise endpoints; pass `validate_backend_support=False` when working with stub clients in tests.

### Async Transport

Prefer `asyncio`? Install the async extra and swap in the `AsyncPlexityClient`, which uses `httpx.AsyncClient` under the hood:

```python
import asyncio
from plexity_sdk import AsyncPlexityClient

async def main():
    async with AsyncPlexityClient(base_url="https://api.plexity.ai", api_key="sqk_xxx.yyy") as client:
        workflows = await client.list_workflows()
        print(workflows)

asyncio.run(main())
```

### Developer Layer Roadmap

Track the upcoming SDK and GraphRAG developer initiatives in [`docs/SDK_INITIATIVES.md`](docs/SDK_INITIATIVES.md). The plan covers the package split, Neo4j-first APIs, language wrappers, and enterprise reference architectures.

### GraphRAG Runtime Packages

`GraphRAGClient` now understands runtime packages so you can opt into enterprise capabilities explicitly:

```python
from plexity_sdk import (
    GraphRAGClient,
    GraphRAGPackage,
    Neo4jConnectionConfig,
    PlexityClient,
)

plexity_client = PlexityClient(base_url="https://api.plexity.ai", api_key="sqk_xxx.yyy")
client = GraphRAGClient(
    plexity_client,
    package=GraphRAGPackage.ENTERPRISE,
    org_id="org_default",
    enable_features=["schema_diff"],
)

neo4j_manager = client.create_neo4j_driver_manager(
    Neo4jConnectionConfig(
        uri="neo4j+s://demo.databases.neo4j.io",
        username="neo4j",
        password="secret",
        database="neo4j",
    )
)
advisor = client.recommend_neo4j_job_slices(neo4j_manager, limit=5)
```

Install `plexity-sdk[graphrag-enterprise]` for Neo4j-powered helpers or use the `enterprise` extra to pull the same dependency bundle.

### Runtime & Ops Enhancements

- Inject Temporal or Argo via `GraphRAGClient.set_scheduler()` to orchestrate long-running incremental jobs with idempotency keys.
- Offload intermediate state to S3, GCS, or MinIO using the pluggable storage adapters bundled in `plexity_sdk.storage`.
- Apply tenant-specific access control, encryption, and compliance directives (SOC2/GDPR/CCPA) through `AccessControlPolicy`, `EncryptionContext`, and `ComplianceDirective` helpers.
